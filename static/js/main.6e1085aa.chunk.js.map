{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","getRandomData","list","i","row","j","push","Math","floor","random","useState","setList","toggleItem","newList","checkList","length","className","onClick","map","item","key","result","setTimeout","alert","handleClick","href","data-size","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gMA0FeA,MAvFf,WAEE,IAIMC,EAAgB,WAEpB,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAIE,KARDC,KAAKC,MAAsB,EAAhBD,KAAKE,WAUrBP,EAAKI,KAAKF,GAEZ,OAAOF,GAfI,EAkBWQ,mBAAST,KAlBpB,mBAkBNC,EAlBM,KAkBAS,EAlBA,KAgDPC,EAAa,SAACC,EAASV,EAAGE,GAC9BQ,EAAQV,GAAGE,GAAK,EAAEQ,EAAQV,GAAGE,IAGzBS,EAAY,SAACD,GACjB,IAAK,IAAIV,EAAI,EAAGA,EAAIU,EAAQE,OAAQZ,IAClC,IAAK,IAAIE,EAAI,EAAGA,EAAIQ,EAAQV,GAAGY,OAAQV,IACrC,GAAsB,IAAlBQ,EAAQV,GAAGE,GACb,OAAO,EAIb,OAAO,GAQT,OACE,yBAAKW,UAAU,OACb,4BAAQA,UAAU,YAAYC,QAPhB,WAChB,IAAIf,EAAOD,IACXU,EAAQT,KAKN,cACA,yBAAKc,UAAU,WAEXd,EAAKgB,IAAI,SAACd,EAAKD,GAAN,OACPC,EAAIc,IAAI,SAACC,EAAMd,GAAP,OACN,0BAAMe,IAAG,UAAMjB,EAAN,YAAWE,GAAMY,QAAU,kBAvD5B,SAACd,EAAGE,GACtB,IAAIQ,EAAO,YAAOX,GAClBU,EAAWC,EAASV,EAAGE,GAEnBA,EAAI,GACNO,EAAWC,EAASV,EAAGE,EAAI,GAGzBA,EAAIQ,EAAQV,GAAGY,OAAS,GAC1BH,EAAWC,EAASV,EAAGE,EAAI,GAGzBF,EAAI,GACNS,EAAWC,EAASV,EAAI,EAAGE,GAGzBF,EAAIU,EAAQE,OAAS,GACvBH,EAAWC,EAASV,EAAI,EAAGE,GAE7BM,EAAQE,GACR,IAAIQ,EAASP,EAAUD,GACvBS,WAAW,WACLD,GACFE,MAAM,SAgC0CC,CAAYrB,EAAGE,IAAKW,UAAS,eAAUG,EAAO,SAAW,WAK3G,yBAAKH,UAAU,cACb,kBAAC,IAAD,CAAcS,KAAK,qCAAqCC,YAAU,QAAQC,aAAW,kCAArF,qBCxEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.6e1085aa.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport GitHubButton from 'react-github-btn'\n\nfunction App() {\n\n  const getRandom = (min, max) => {\n    return Math.floor(Math.random() * 2)\n  }\n\n  const getRandomData = () => {\n    let list = []\n    for (let i = 0; i < 3; i++) {\n      let row = []\n      for (let j = 0; j < 3; j++) {\n        row.push(getRandom())\n      }\n      list.push(row)\n    }\n    return list\n  }\n\n  const [list, setList] = useState(getRandomData())\n\n  const handleClick = (i, j) => {\n    let newList = [...list]\n    toggleItem(newList, i, j)\n    // left\n    if (j > 0) {\n      toggleItem(newList, i, j - 1)\n    }\n    // right\n    if (j < newList[i].length - 1) {\n      toggleItem(newList, i, j + 1)\n    }\n    // top\n    if (i > 0) {\n      toggleItem(newList, i - 1, j)\n    }\n    // bottom\n    if (i < newList.length - 1) {\n      toggleItem(newList, i + 1, j)\n    }\n    setList(newList)\n    let result = checkList(newList)\n    setTimeout(() => {\n      if (result) {\n        alert('win')\n      }\n    })\n  }\n\n  const toggleItem = (newList, i, j) => {\n    newList[i][j] = 1^newList[i][j]\n  }\n\n  const checkList = (newList) => {\n    for (let i = 0; i < newList.length; i++) {\n      for (let j = 0; j < newList[i].length; j++) {\n        if (newList[i][j] === 0) {\n          return false\n        }\n      }\n    }\n    return true\n  }\n\n  const startGame = () => {\n    let list = getRandomData()\n    setList(list)\n  }\n\n  return (\n    <div className=\"app\">\n      <button className=\"btn-start\" onClick={ startGame }>start game</button>\n      <div className=\"content\">\n        {\n          list.map((row, i) => \n            row.map((item, j) => \n              <span key={ `${i}-${j}` } onClick={ () => handleClick(i, j) } className={`item ${item ? 'active' : ''}`}></span>\n            )\n          )\n        }\n      </div>\n      <div className=\"btn-github\">\n        <GitHubButton href=\"https://github.com/viewweiwu/light\" data-size=\"large\" aria-label=\"Star viewweiwu/light on GitHub\">View On Github</GitHubButton>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}